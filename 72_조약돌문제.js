// 3열 N행의 가중치가 있는 배열 arr이 주어질 때,
// 다음의 규칙을 준수하면서 조약돌을 놓을 때 최대 가중치의 합을 반환하는 solution() 함수를 구하라.

// [ 제약 조건 ]
// - 각 열에 조약돌은 적어도 하나는 놓아야 한다.
// - 각 조약돌에 바로 인접한 위치에 조약돌을 놓을 수 없다. (상하좌우)

function solution(arr) {
  const n = arr[0].length; // 열 개수
  const dp = Array.from(Array(4), () => Array(n).fill(0));
  dp[0][0] = arr[0][0]; // 맨 위에만 조약돌 놓기
  dp[1][0] = arr[1][0]; // 가운데만 조약돌 놓기
  dp[2][0] = arr[2][0]; // 맨 아래에만 조약돌 놓기
  dp[3][0] = arr[0][0] + arr[2][0]; // 맨 위, 맨 아래에 조약돌 놓기

  for (let i = 1; i < n; i++) {
    // 맨위(0) -> 이전 : 중간(1), 맨아래(2) 가능
    dp[0][i] = arr[0][i] + Math.max(dp[1][i - 1], dp[2][i - 1]);
    // 중간(1) -> 이전 : 맨위(0), 맨아래(2), 맨위+맨아래(3) 가능
    dp[1][i] = arr[1][i] + Math.max(dp[0][i - 1], dp[2][i - 1], dp[3][i - 1]);
    // 맨아래(2) -> 이전 : 맨위(0), 중간(1) 가능
    dp[2][i] = arr[2][i] + Math.max(dp[0][i - 1], dp[1][i - 1]);
    // 맨위+맨아래(3) -> 이전 : 중간(1) 가능
    dp[3][i] = arr[0][i] + arr[2][i] + dp[1][i - 1];
  }

  return Math.max(...dp.map((row) => row[n - 1]));
}

console.log(
  solution([
    [1, 3, 3, 2],
    [2, 1, 4, 1],
    [1, 5, 2, 3],
  ])
); // 19
